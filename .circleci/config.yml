version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@1.0.0
  queue: eddiewebb/queue@1.5.0

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      react_environment:
        description: 'The react environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
      remote_docker_version:
        description: 'Remote version of docker'
        type: string
        default: 20.10.2
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                remote-docker-version: << parameters.remote_docker_version >>
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg APP_ENV=<< parameters.react_environment >>
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker:
                version: << parameters.remote_docker_version >>
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1} --build-arg APP_ENV=<< parameters.react_environment >>

workflows:
  all:
    jobs:
      # Try building the ECS docker image on each branch
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: curationadmintools-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          react_environment: 'development'

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: curationadmintools-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          react_environment: 'development'

      - queue/block_workflow:
          <<: *only_dev_main
          name: wait_for_deploy_queue
          time: '30'

      - aws-ecs/deploy-service-update:
          <<: *only_dev
          context: pocket
          name: deploy_ecs_dev
          family: 'CurationAdminTools-Dev'
          cluster-name: 'CurationAdminTools-Dev'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'CurationAdminTools-Dev-ECS'
          codedeploy-deployment-group-name: 'CurationAdminTools-Dev-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 80
          container-image-name-updates: 'container=app,image-and-tag=410318598490.dkr.ecr.us-east-1.amazonaws.com/curationadmintools-dev-app:$CIRCLE_SHA1'
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          verify-revision-is-deployed: true
          verification-timeout: '30'
          requires:
            - build_docker_dev
            - wait_for_deploy_queue

      # Build & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: curationadmintools-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          react_environment: 'production'

      - aws-ecs/deploy-service-update:
          <<: *only_main
          name: deploy_ecs_prod
          context: pocket
          family: 'CurationAdminTools-Prod'
          cluster-name: 'CurationAdminTools-Prod'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'CurationAdminTools-Prod-ECS'
          codedeploy-deployment-group-name: 'CurationAdminTools-Prod-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 80
          container-image-name-updates: 'container=app,image-and-tag=996905175585.dkr.ecr.us-east-1.amazonaws.com/curationadmintools-prod-app:$CIRCLE_SHA1'
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          verify-revision-is-deployed: true
          verification-timeout: '30'
          requires:
            - build_docker_prod
            - wait_for_deploy_queue

      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: CurationAdminTools

      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: CurationAdminTools

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/curation-admin-tools
          sentry_project_name: curation-admin-tools
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_ecs_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/curation-admin-tools
          sentry_project_name: curation-admin-tools
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_ecs_dev

